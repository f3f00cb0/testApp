<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <meta name="viewport" content="width=device-width">
    {% block stylesheets %}
        {# 'app' must match the first argument to addEntry() in webpack.config.js #}
        {{ encore_entry_link_tags('app') }}
        <!-- Renders a link tag (if your module requires any CSS) 
        <link rel="stylesheet" href="/build/app.css"> -->
    {% endblock %}

    {% block javascripts %}
        {{ encore_entry_script_tags('app') }}
        <!-- Renders app.js & a webpack runtime.js file
        <script src="/build/runtime.js" defer></script>
        <script src="/build/app.js" defer></script>
        See note below about the "defer" attribute -->
    {% endblock %}
    <style>
        body, html {
            height: fit-content;
        }
        {% if files | length > 15 %}
        #controlsApp {
            position: sticky;
        }
        {% endif %}
    </style>
</head>
<body>
<div class="container is-fluid">
    <section id="header">
        <div id="menu" class="text-right">
            <a href="/profile">profile</a>
        </div>
    </section>
</div>

<section class="section" id="listsApp">
    <div class="container is-fluid">
        <div class="columns is-mobile">
            <div class="column is-12">
                {% for key in files %}
                    <li class="song" data-music="yes" onclick="readSong('{{ key }}')">{{ key | trim('.mp3') }}</li>
                {% endfor %}
            </div>
        </div>
    </div>
</section>

<div id="controlsApp">
    <div class="container is-fluid">
        <div class="columns is-mobile">
            <div class="column is-12">
                <p id="playingnow"></p>
                <audio preload="auto" id="audio" controls>
                    <source id="audiosource" src="JACKBOYS, Sheck Wes - GANG GANG.mp3">
                </audio>
                <div class="columns is-mobile" id="controls">
                    <div class="column is-12">
                        <div id="timeline">
                            <div id="playhead"></div>
                        </div>
                    </div>
                </div>
                <div class="columns is-mobile" id="controlButtons">
                    <div class="column is-2">
                        <label class="backward" for="backward">
                            <svg version="1.1" id="backwardbutton" onclick="backward()"
                                 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px"
                                 y="0px"
                                 viewBox="0 0 100 100" style="enable-background:new 0 0 100 100;" xml:space="preserve">
                                    <style type="text/css">
                                        .st0 {
                                            fill: #01A3AB;
                                        }

                                        .st1 {
                                            fill: #F7BEC0;
                                        }
                                    </style>
                                <g>
                                    <path class="st0" d="M23.81,46.73l3.98-1.99V23.32c0-2.56-2.08-4.64-4.64-4.64h-1.53c-2.56,0-4.64,2.08-4.64,4.64v55.11
                                    		c0,2.56,2.08,4.64,4.64,4.64h1.53c2.56,0,4.64-2.08,4.64-4.64V57.02l-3.98-1.99C20.38,53.32,20.38,48.44,23.81,46.73z"/>
                                    <path class="st1" d="M76.3,20.48L27.79,44.73l-3.98,1.99c-3.42,1.71-3.42,6.59,0,8.3l3.98,1.99L76.3,81.28
                                    		c3.09,1.54,6.72-0.7,6.72-4.15v-52.5C83.02,21.18,79.39,18.94,76.3,20.48z"/>
                                </g>
                                    </svg>
                        </label>
                    </div>
                    <div class="column is-2">
                        <label class="play" for="play">
                            <svg version="1.1" id="playbutton" onclick="togglePlayPause()"
                                 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px"
                                 y="0px"
                                 viewBox="0 0 100 100" style="enable-background:new 0 0 100 100;" xml:space="preserve">
                                    <style type="text/css">
                                        .st0 {
                                            fill: #01A3AB;
                                        }
                                    </style>
                                <path class="st0" d="M80.52,47.08L22.4,18.02c-2.17-1.09-4.73,0.49-4.73,2.92v58.11c0,2.43,2.55,4.01,4.73,2.92l58.11-29.06
                                    	C82.92,51.72,82.92,48.28,80.52,47.08z"/>
                                    </svg>
                        </label>
                        <label class="pause" for="pause">
                            <svg version="1.1" id="pausebutton" onclick="togglePlayPause()"
                                 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px"
                                 y="0px"
                                 viewBox="0 0 100 100" style="enable-background:new 0 0 100 100;" xml:space="preserve">
                                    <style type="text/css">
                                        .st0 {
                                            fill: #01A3AB;
                                        }
                                    </style>
                                <path class="st0" d="M62.53,89.42L62.53,89.42c3.65,0,6.62-2.96,6.62-6.62V17.2c0-3.65-2.96-6.62-6.62-6.62h0
                                    	c-3.65,0-6.62,2.96-6.62,6.62v65.6C55.91,86.45,58.87,89.42,62.53,89.42z"/>
                                <path class="st0" d="M37.47,89.42L37.47,89.42c3.65,0,6.62-2.96,6.62-6.62V17.2c0-3.65-2.96-6.62-6.62-6.62h0
                                    	c-3.65,0-6.62,2.96-6.62,6.62v65.6C30.86,86.45,33.82,89.42,37.47,89.42z"/>
                                    </svg>
                        </label>
                    </div>
                    <div class="column is-2">
                        <label class="forward" for="forward">
                            <svg version="1.1" id="forwardbutton" onclick="forward()" xmlns="http://www.w3.org/2000/svg"
                                 xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                 viewBox="0 0 100 100" style="enable-background:new 0 0 100 100;" xml:space="preserve">
                                    <style type="text/css">
                                        .st0 {
                                            fill: #01A3AB;
                                        }

                                        .st1 {
                                            fill: #F7BEC0;
                                        }
                                    </style>
                                <g>
                                    <path class="st0" d="M76.19,46.73l-3.98-1.99V23.32c0-2.56,2.08-4.64,4.64-4.64h1.53c2.56,0,4.64,2.08,4.64,4.64v55.11
                                    		c0,2.56-2.08,4.64-4.64,4.64h-1.53c-2.56,0-4.64-2.08-4.64-4.64V57.02l3.98-1.99C79.62,53.32,79.62,48.44,76.19,46.73z"/>
                                    <path class="st1" d="M23.7,20.48l48.51,24.26l3.98,1.99c3.42,1.71,3.42,6.59,0,8.3l-3.98,1.99L23.7,81.28
                                    		c-3.09,1.54-6.72-0.7-6.72-4.15v-52.5C16.98,21.18,20.61,18.94,23.7,20.48z"/>
                                </g>
                            </svg>
                        </label>
                    </div>
                    <div class="column is-2">
                        <label class="repeat" for="repeat" onclick="toggleRepeat()">
                            <svg version="1.1" id="repeatbutton" xmlns="http://www.w3.org/2000/svg"
                                 xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 60 60"
                                 style="enable-background:new 0 0 60 60;" xml:space="preserve">
                                <g>
                                    <path id="repeatButtonTop"
                                          d="M42,12H20.414l7.293-7.293c0.391-0.391,0.391-1.023,0-1.414s-1.023-0.391-1.414,0l-8.999,8.999   c-0.093,0.092-0.166,0.203-0.217,0.326c-0.101,0.244-0.101,0.52,0,0.764c0.051,0.123,0.124,0.234,0.217,0.326l8.999,8.999   C26.488,22.902,26.744,23,27,23s0.512-0.098,0.707-0.293c0.391-0.391,0.391-1.023,0-1.414L20.414,14H42c8.822,0,16,7.178,16,16   c0,4.252-1.668,8.264-4.696,11.295c-0.391,0.391-0.391,1.024,0,1.414c0.195,0.195,0.451,0.293,0.707,0.293s0.512-0.098,0.707-0.293   C58.124,39.3,60,34.786,60,30C60,20.075,51.925,12,42,12z" style="fill: #cb9d06;"/>
                                    <path id="repeatButtonBottom"
                                          d="M35.707,37.293c-0.391-0.391-1.023-0.391-1.414,0s-0.391,1.023,0,1.414L41.586,46H18C9.178,46,2,38.822,2,30   c0-3.783,1.359-7.46,3.828-10.354c0.358-0.421,0.309-1.052-0.111-1.41c-0.419-0.359-1.052-0.31-1.41,0.111   C1.529,21.604,0,25.741,0,30c0,9.925,8.075,18,18,18h23.586l-7.293,7.293c-0.391,0.391-0.391,1.023,0,1.414   C34.488,56.902,34.744,57,35,57s0.512-0.098,0.707-0.293l9-9c0.391-0.391,0.391-1.023,0-1.414L35.707,37.293z" style="fill: #cb9d06;"/>
                                </g>
                            </svg>
                        </label>
                    </div>
                </div>
                <div class="columns is-mobile" id="appcontrol">
                    <div class="column is-4">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64" width="64px" height="64px">
                            <linearGradient id="GgB4DrbdisjPOMNxvlzLta" x1="48" x2="48" y1="41.583" y2="50.252" gradientUnits="userSpaceOnUse" spreadMethod="reflect">
                                <stop offset="0" stop-color="#6dc7ff"/>
                                <stop offset="1" stop-color="#e6abff"/>
                            </linearGradient>
                            <path fill="url(#GgB4DrbdisjPOMNxvlzLta)" d="M50,42h-4c-0.552,0-1,0.448-1,1v7h6v-7C51,42.448,50.552,42,50,42z"/>
                            <linearGradient id="GgB4DrbdisjPOMNxvlzLtb" x1="26" x2="26" y1="11.833" y2="52.17" gradientUnits="userSpaceOnUse" spreadMethod="reflect">
                                <stop offset="0" stop-color="#1a6dff"/>
                                <stop offset="1" stop-color="#c822ff"/>
                            </linearGradient>
                            <path fill="url(#GgB4DrbdisjPOMNxvlzLtb)" d="M25 41H27V45H25z"/>
                            <linearGradient id="GgB4DrbdisjPOMNxvlzLtc" x1="25" x2="25" y1="11.833" y2="52.17" gradientUnits="userSpaceOnUse" spreadMethod="reflect">
                                <stop offset="0" stop-color="#1a6dff"/>
                                <stop offset="1" stop-color="#c822ff"/>
                            </linearGradient>
                            <path fill="url(#GgB4DrbdisjPOMNxvlzLtc)" d="M19 30H31V32H19z"/>
                            <linearGradient id="GgB4DrbdisjPOMNxvlzLtd" x1="32" x2="32" y1="11.833" y2="52.17" gradientUnits="userSpaceOnUse" spreadMethod="reflect">
                                <stop offset="0" stop-color="#1a6dff"/>
                                <stop offset="1" stop-color="#c822ff"/>
                            </linearGradient>
                            <path fill="url(#GgB4DrbdisjPOMNxvlzLtd)" d="M56,32v-2c0-1.103-0.897-2-2-2H42v-2c1.103,0,2-0.897,2-2v-2c0-1.103-0.897-2-2-2h-0.382 l-3.447-6.895C37.829,12.424,37.144,12,36.381,12H13.619c-0.763,0-1.448,0.424-1.791,1.106L8.382,20H8c-1.103,0-2,0.897-2,2v2 c0,1.103,0.897,2,2,2v24c0,1.103,0.897,2,2,2h9h12h9h2h12c1.103,0,2-0.897,2-2V38c1.103,0,2-0.897,2-2v-2C58,32.897,57.103,32,56,32 z M54,30v2H42v-2H54z M13.619,14h22.762l3.001,6H10.618L13.619,14z M8,22h34v2H8V22z M40,26v6v4v2v4h-4v2h4v2h-9v-9 c0-1.654-1.346-3-3-3h-6c-1.654,0-3,1.346-3,3v9h-9v-2h4v-2h-4V26H40z M10,50v-2h9v2H10z M21,50V37c0-0.552,0.448-1,1-1h6 c0.552,0,1,0.448,1,1v13H21z M31,50v-2h9v2H31z M54,50H42V38h12V50z M56,36H42v-2h14V36z"/>
                        </svg>
                    </div>
                    <div class="column is-4">
                        search
                    </div>
                    <div class="column is-4">
                        profile
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--<section id="home">
        {{ number }} | {{ message }} | EEE
    </section>-->


<script>
    const musics = [];
    {% for key in files %}
    musics.push('{{ key }}');
    {% endfor %}
    const songs = document.getElementsByClassName('song');
    // How Many Songs In Playlist
    let HMSIP = musics.length - 1;
    const audio = document.getElementById('audio');
    let duration = audio.duration;
    const source = document.getElementById('audiosource');
    let actualyPlaying = 0;
    const playingNow = document.getElementById('playingnow');
    // Music Playing In Playlist
    let MPIP = 3;
    source.src = musics[MPIP];
    audio.load();
    actualyPlaying = musics[MPIP];
     if(actualyPlaying === undefined){
        playingNow.innerText = 'Aucune musique dans la liste';
    } else {
        playingNow.innerText = actualyPlaying.slice(0, -4);
    }
    let repeat = false;
    let repeatButton = document.getElementById('repeatbutton');
    let repeatButtonTop = document.getElementById('repeatButtonTop');
    let repeatButtonBottom = document.getElementById('repeatButtonBottom');

    function toggleRepeat() {
        console.log('repeat', repeat);
        if (repeat) {
            repeatButtonTop.style = 'fill: black;';
            repeatButtonBottom.style = 'fill: black;';
            audio.loop = false;
        } else {
            audio.loop = true;
            repeatButtonTop.style = 'fill: green;';
            repeatButtonBottom.style = 'fill: green;';
        }
        repeat = !repeat;
    }

    function readSong(song) {
        for (let i = 0; i < musics.length; i++) {
            if (song === musics[i]) {
                MPIP = i;
                source.src = musics[i];
                audio.load();
                actualyPlaying = musics[i];
                if(actualyPlaying === undefined){
                    playingNow.innerText = 'Aucune musique dans la liste';
                } else {
                    playingNow.innerText = actualyPlaying.slice(0, -4);
                }
                
                togglePlayPause();
            }
        }
    }

    function togglePlayPause() {
        if (audio.paused || audio.ended) {
            audio.play();
            document.getElementById('playbutton').style.display = "none";
            document.getElementById('pausebutton').style.display = "block";
        } else {
            audio.pause();
            document.getElementById('playbutton').style.display = "block";
            document.getElementById('pausebutton').style.display = "none";

        }
    }

    function backward() {
        let previousSong = MPIP - 1;
        if (previousSong < 0) {
            console.log(musics[HMSIP]);
            actualyPlaying = musics[HMSIP];
            source.src = musics[HMSIP];

            //SET CLASS PAYING TO SONG
            let playingNow = songs[HMSIP];

            //remove all playing class
            let songsInList = document.getElementsByClassName('cardplaying');
            songsInList[0].classList.remove('cardplaying');
            playingNow.classList.add('cardplaying');

            audio.load();
            audio.play();
            MPIP = HMSIP;
        } else {
            console.log(musics[previousSong]);
            actualyPlaying = musics[previousSong];
            source.src = musics[previousSong];

            //SET CLASS PAYING TO SONG
            let playingNow = songs[previousSong];

            //remove all playing class
            let songsInList = document.getElementsByClassName('cardplaying');
            songsInList[0].classList.remove('cardplaying');
            playingNow.classList.add('cardplaying');

            audio.load();
            audio.play();
            MPIP = MPIP - 1;
        }
        console.log('backward');
        playingNow.innerText = actualyPlaying.slice(0, -4);
    }

    function forward() {
        let nextSong = MPIP + 1;
        if (nextSong > HMSIP) {
            actualyPlaying = musics[0];
            source.src = musics[0];

            //SET CLASS PAYING TO SONG
            let playingNow = songs[0];

            //remove all playing class
            let songsInList = document.getElementsByClassName('cardplaying');
            songsInList[0].classList.remove('cardplaying');
            playingNow.classList.add('cardplaying');

            audio.load();
            audio.play();
            MPIP = 0;
        } else {
            actualyPlaying = musics[nextSong];
            source.src = musics[nextSong];

            //SET CLASS PAYING TO SONG
            let playingNow = songs[nextSong];

            //remove all playing class
            let songsInList = document.getElementsByClassName('cardplaying');
            songsInList[0].classList.remove('cardplaying');
            playingNow.classList.add('cardplaying');

            audio.load();
            audio.play();
            MPIP = MPIP + 1;
        }
        console.log('forward');
        playingNow.innerText = actualyPlaying.slice(0, -4);
    }

    const timeline = document.getElementById('timeline');
    const playhead = document.getElementById("playhead");
    let timelineWidth = timeline.offsetWidth - playhead.offsetWidth;
    audio.addEventListener("timeupdate", timeUpdate, false);

    timeline.addEventListener("click", function (event) {
        moveplayhead(event);
        audio.currentTime = duration * clickPercent(event);
    }, false);

    function timeUpdate() {
        let playPercent = timelineWidth * (audio.currentTime / duration);
        playhead.style.marginLeft = playPercent + "px";
    }

    function clickPercent(event) {
        return (event.clientX - getPosition(timeline)) / timelineWidth;
    }

    playhead.addEventListener('mousedown', mouseDown, false);
    window.addEventListener('mouseup', mouseUp, false);

    let onplayhead = false;

    function mouseDown() {
        onplayhead = true;
        window.addEventListener('mousemove', moveplayhead, true);
        audio.removeEventListener('timeupdate', timeUpdate, false);
    }

    function mouseUp(event) {
        if (onplayhead === true) {
            moveplayhead(event);
            window.removeEventListener('mousemove', moveplayhead, true);
            // change current time
            audio.currentTime = duration * clickPercent(event);
            audio.addEventListener('timeupdate', timeUpdate, false);
        }
        onplayhead = false;
    }

    function moveplayhead(event) {
        let newMargLeft = event.clientX - getPosition(timeline);

        if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {
            playhead.style.marginLeft = newMargLeft + "px";
        }
        if (newMargLeft < 0) {
            playhead.style.marginLeft = "0px";
        }
        if (newMargLeft > timelineWidth) {
            playhead.style.marginLeft = timelineWidth + "px";
        }
    }


    let volume = document.querySelector("#volume-control");

    volume.addEventListener("change", function (e) {
        audio.volume = e.currentTarget.value / 100;
    })

    audio.onended = function () {
        forward();
    };

    function getPosition(el) {
        return el.getBoundingClientRect().left;
    }

    audio.addEventListener("canplaythrough", function () {
        duration = audio.duration;
    }, false);

    document.addEventListener('click', function (e) {
        e = e || window.event;
        const target = e.target || e.srcElement;
        console.log(target);
        let isMusic = false;
        if (target.dataset.music) {
            isMusic = target.dataset.music;
            target.classList.add('cardplaying');
            //remove all playing class
            let songsInList = document.getElementsByClassName('cardplaying');
            if (target === songsInList[0]) {
                if (songsInList[1]) {
                    if (songsInList[1].classList.contains('cardplaying')) {
                        songsInList[1].classList.remove('cardplaying');
                    }
                }
            } else {
                if (songsInList[0].classList.contains('cardplaying')) {
                    songsInList[0].classList.remove('cardplaying');
                }
            }
            target.classList.add('cardplaying');
        }
    }, false);

</script>
</body>
</html> 