<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <meta name="viewport" content="width=device-width">
    {% block stylesheets %}
        {# 'app' must match the first argument to addEntry() in webpack.config.js #}
        {{ encore_entry_link_tags('app') }}
        <!-- Renders a link tag (if your module requires any CSS) 
        <link rel="stylesheet" href="/build/app.css"> -->
    {% endblock %}

    {% block javascripts %}
        {{ encore_entry_script_tags('app') }}
        <!-- Renders app.js & a webpack runtime.js file
        <script src="/build/runtime.js" defer></script>
        <script src="/build/app.js" defer></script>
        See note below about the "defer" attribute -->
    {% endblock %}
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap" rel="stylesheet">
    <style>
        body, html {
            height: fit-content;
        }

        {% if files | length > 15 %}
        #controlsApp {
            position: sticky;
        }

        {% endif %}
        .section {
            padding: unset;
        }
    </style>
</head>
<body>
{{ include('header.html.twig') }}
<section class="section" id="listsApp">
    <div class="container is-fluid">
        <div class="columns is-mobile">
            <div class="column is-12">
                {% for key in files %}
                    <li class="song" data-music="yes" onclick="readSong('{{ key }}')">{{ key | trim('.mp3') }}</li>
                {% endfor %}
            </div>
        </div>
    </div>
</section>

<div id="controlsApp">
    <div class="container is-fluid">
        <div class="columns is-mobile controlscolumns">
            <div class="column is-3">
                <p id="playingnow" class="cardplayingbar"></p>
            </div>
            <div class="column is-9">
                <audio preload="auto" id="audio" controls>
                    <source id="audiosource" src="JACKBOYS, Sheck Wes - GANG GANG.mp3">
                </audio>
                <div class="columns is-mobile" id="controls">
                    <div class="column is-12">
                        <div id="timeline">
                            <div id="playhead"></div>
                        </div>
                    </div>
                </div>
                 {{ include('controls.html.twig') }}
                 {{ include('footer.html.twig') }}
            </div>
           
            <div class="column is-12">
                 
            </div>
        </div>
    </div>
</div>

<!--<section id="home">
        {{ number }} | {{ message }} | EEE
    </section>-->


<script>
    const musics = [];
    {% for key in files %}
    musics.push('{{ key }}');
    {% endfor %}
    const songs = document.getElementsByClassName('song');
    // How Many Songs In Playlist
    let HMSIP = musics.length - 1;
    const audio = document.getElementById('audio');
    let duration = audio.duration;
    const source = document.getElementById('audiosource');
    let actualyPlaying = 0;
    const playingNow = document.getElementById('playingnow');
    // Music Playing In Playlist
    let MPIP = 0;
    source.src = musics[MPIP];
    audio.load();
    actualyPlaying = musics[MPIP];
    if (actualyPlaying === undefined) {
        playingNow.innerText = 'Aucune musique dans la liste';
    } else {
        playingNow.innerText = actualyPlaying.slice(0, -4);
    }
    let repeat = false;
    let repeatButton = document.getElementById('repeatbutton');
    let repeatButtonTop = document.getElementById('repeatButtonTop');
    let repeatButtonBottom = document.getElementById('repeatButtonBottom');

    let shuffle = false;
    let shuffleButton = document.getElementById('shufflebutton');
    let shuffleButton1 = document.getElementById('shufflebuttonp1');
    let shuffleButton2 = document.getElementById('shufflebuttonp2');
    let shuffleButton3 = document.getElementById('shufflebuttonp3');

    function toggleShuffle(){
        console.log('shuffle', shuffle);
        if (shuffle) {
            shuffleButton1.style = 'fill: #cb9d06;';
            shuffleButton2.style = 'fill: #cb9d06;';
            shuffleButton3.style = 'fill: #cb9d06;';
        } else {
            shuffleButton1.style = 'fill: green;';
            shuffleButton2.style = 'fill: green;';
            shuffleButton3.style = 'fill: green;';
        }
        shuffle = !shuffle;
    }

    function toggleRepeat() {
        console.log('repeat', repeat);
        if (repeat) {
            repeatButtonTop.style = 'fill: #cb9d06;';
            repeatButtonBottom.style = 'fill: #cb9d06;';
            audio.loop = false;
        } else {
            audio.loop = true;
            repeatButtonTop.style = 'fill: green;';
            repeatButtonBottom.style = 'fill: green;';
        }
        repeat = !repeat;
    }

    function readSong(song) {
        for (let i = 0; i < musics.length; i++) {
            if (song === musics[i]) {
                MPIP = i;
                source.src = musics[i];
                audio.load();
                actualyPlaying = musics[i];
                if (actualyPlaying === undefined) {
                    playingNow.innerText = 'Aucune musique dans la liste';
                } else {
                    playingNow.innerText = actualyPlaying.slice(0, -4);
                }

                togglePlayPause();
            }
        }
    }

    function togglePlayPause() {
        if (audio.paused || audio.ended) {
            audio.play();
            document.getElementById('playbutton').style.display = "none";
            document.getElementById('pausebutton').style.display = "block";
        } else {
            audio.pause();
            document.getElementById('playbutton').style.display = "block";
            document.getElementById('pausebutton').style.display = "none";
        }
    }

    function backward() {
        let previousSong = MPIP - 1;
        if (previousSong < 0) {
            console.log(musics[HMSIP]);
            actualyPlaying = musics[HMSIP];
            source.src = musics[HMSIP];

            //SET CLASS PAYING TO SONG
            let playingNow = songs[HMSIP];

            //remove all playing class
            let songsInList = document.getElementsByClassName('cardplaying');
            if (songsInList[0]) {
                songsInList[0].classList.remove('cardplaying');
            }
            playingNow.classList.add('cardplayingbar');

            audio.load();
            audio.play();
            MPIP = HMSIP;
        } else {
            console.log(musics[previousSong]);
            actualyPlaying = musics[previousSong];
            source.src = musics[previousSong];

            //SET CLASS PAYING TO SONG
            let playingNow = songs[previousSong];

            //remove all playing class
            let songsInList = document.getElementsByClassName('cardplaying');
            if (songsInList[0]) {
                songsInList[0].classList.remove('cardplaying');
            }

            playingNow.classList.add('cardplayingbar');

            audio.load();
            audio.play();
            MPIP = MPIP - 1;
        }
        console.log('backward');
        playingNow.innerText = actualyPlaying.slice(0, -4);
    }

    function forward() {
        if (shuffle) {
            let rand = Math.floor(Math.random() * (songs.length + 1));
            console.log(rand);
            let nextSong = rand;
            let playingNow = songs[nextSong];
            actualyPlaying = musics[nextSong];
            source.src = musics[nextSong];
            //remove all playing class
            let songsInList = document.getElementsByClassName('cardplaying');
            if (songsInList[0]) {
                songsInList[0].classList.remove('cardplaying');
            }
            playingNow.classList.add('cardplaying');
            audio.load();
            audio.play();
            MPIP = rand;
        } else {
            let nextSong = MPIP + 1;
            if (nextSong > HMSIP) {
                actualyPlaying = musics[0];
                source.src = musics[0];

                //SET CLASS PAYING TO SONG
                let playingNow = songs[0];

                //remove all playing class
                let songsInList = document.getElementsByClassName('cardplaying');
                if (songsInList[0]) {
                    songsInList[0].classList.remove('cardplaying');
                }

                playingNow.classList.add('cardplaying');

                audio.load();
                audio.play();
                MPIP = 0;
            } else {
                actualyPlaying = musics[nextSong];
                source.src = musics[nextSong];

                //SET CLASS PAYING TO SONG
                let playingNow = songs[nextSong];

                //remove all playing class
                let songsInList = document.getElementsByClassName('cardplaying');
                if (songsInList[0]) {
                    songsInList[0].classList.remove('cardplaying');
                }
                playingNow.classList.add('cardplaying');

                audio.load();
                audio.play();
                MPIP = MPIP + 1;
            }
        }
        console.log('forward');
        playingNow.innerText = actualyPlaying.slice(0, -4);
    }

    const timeline = document.getElementById('timeline');
    const playhead = document.getElementById("playhead");
    playhead.style = 'background-color: #cb9d06;'
    let timelineWidth = timeline.offsetWidth - playhead.offsetWidth;
    audio.addEventListener("timeupdate", timeUpdate, false);

    timeline.addEventListener("click", function (event) {
        moveplayhead(event);
        audio.currentTime = duration * clickPercent(event);
    }, false);

    function timeUpdate() {
        let playPercent = timelineWidth * (audio.currentTime / duration);
        playhead.style.marginLeft = playPercent + "px";
    }

    function clickPercent(event) {
        return (event.clientX - getPosition(timeline)) / timelineWidth;
    }

    playhead.addEventListener('mousedown', mouseDown, false);
    window.addEventListener('mouseup', mouseUp, false);

    let onplayhead = false;

    function mouseDown() {
        onplayhead = true;
        window.addEventListener('mousemove', moveplayhead, true);
        audio.removeEventListener('timeupdate', timeUpdate, false);
    }

    function mouseUp(event) {
        if (onplayhead === true) {
            moveplayhead(event);
            window.removeEventListener('mousemove', moveplayhead, true);
            // change current time
            audio.currentTime = duration * clickPercent(event);
            audio.addEventListener('timeupdate', timeUpdate, false);
        }
        onplayhead = false;
    }

    function moveplayhead(event) {
        let newMargLeft = event.clientX - getPosition(timeline);

        if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {
            playhead.style.marginLeft = newMargLeft + "px";
        }
        if (newMargLeft < 0) {
            playhead.style.marginLeft = "0px";
        }
        if (newMargLeft > timelineWidth) {
            playhead.style.marginLeft = timelineWidth + "px";
        }
    }

    audio.onended = function () {
        forward();
    };

    function getPosition(el) {
        return el.getBoundingClientRect().left;
    }

    audio.addEventListener("canplaythrough", function () {
        duration = audio.duration;
    }, false);

    document.addEventListener('click', function (e) {
        e = e || window.event;
        const target = e.target || e.srcElement;
        console.log(target);
        let isMusic = false;
        let songsInList = document.getElementsByClassName('cardplaying');
        if (target.dataset.music) {
            isMusic = target.dataset.music;
            target.classList.add('cardplaying');
            //remove all playing class

            if (target === songsInList[0]) {
                if (songsInList[1]) {
                    if (songsInList[1].classList.contains('cardplaying')) {
                        songsInList[1].classList.remove('cardplaying');
                    }
                }
            } else {
                if (songsInList[0].classList.contains('cardplaying')) {
                    songsInList[0].classList.remove('cardplaying');
                }
            }
            target.classList.add('cardplaying');
            playingNow.classList.add('cardplayingbar');
        } else if (target.classList.contains('playbutton')){
            console.log(songsInList);
            if(songsInList.length === 0){
                songs[0].classList.add('cardplaying');
                playingNow.classList.add('cardplayingbar');
            }
        }
        let fetchingLomepal = fetch('https://musicbrainz.org/ws/2/release?query=lomepal');
        console.log(fetchingLomepal.then(response => {
            console.log(response.json());
        }));
    }, false);
</script>
</body>
</html> 