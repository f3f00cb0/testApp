<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
        <meta name="viewport" content="width=device-width">
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap" rel="stylesheet">
        <style>
        /* Simuler plein écran à F11 avec une disposition des éléments de controles présents */
            html {
            box-sizing: border-box;
            }
            *, *:before, *:after {
            box-sizing: inherit;
            }
            #player__container {
                display: flex;
                justify-content: center;
                
            }
            @media only screen
            and (min-width: 480px)
            and (max-width: 640px) {
                body {
                    background-color: cyan;
                }
                .player__video {
                    width: 320px;
                    height: 180px;
                }
            }
            @media only screen
            and (min-width: 640px)
            and (max-width: 900px) {
                .player__video {
                    width: 480px;
                    height: 270px;
                }
                body {
                    background-color: lightblue;
                }
            }
            @media only screen 
            and (min-width: 900px) 
            and (max-width: 1200px) 
            {
                 .player__video {
                    width: 800px;
                    height: 450px;
                }
                body {
                    background-color: blue;
                }
            }
            @media only screen 
            and (min-width: 1200px) 
            and (max-width: 1600px) {
                 .player__video {
                    width: 960px;
                    height: 540px;
                }
                body {
                    background-color: darkblue;
                }
            }
            @media only screen
            and (min-width: 1600px) {
                .player__video {
                    width: 1280px;
                    height: 720px;
                }
                body {
                    background-color: black;
                    color: white;
                    
                }
            }
            .player {
            max-width: 1600px;
            max-height: 900px;
            border:5px solid rgba(0,0,0,0.2);
            box-shadow:0 0 20px rgba(0,0,0,0.2);
            position: relative;
            font-size: 0;
            overflow: hidden;
            }
            /* This css is only applied when fullscreen is active. */
            .player:fullscreen {
            max-width: none;
            width: 100%;
            }
            .player:-webkit-full-screen {
            max-width: none;
            width: 100%;
            }
            .player__button {
            background:none;
            border:0;
            line-height:1;
            color:white;
            text-align: center;
            outline:0;
            padding: 0;
            cursor:pointer;
            max-width:40px;
            }
            .player__button:focus {
            border-color: #ffc600;
            }
            .player__slider {
            width:10px;
            height:30px;
            }
            .player__controls {
            display:flex;
            position: absolute;
            left: 0;
            bottom:0;
            width: 100%;
            transform: translateY(100%) translateY(-5px);
            transition:all .3s;
            flex-wrap:wrap;
            background:rgba(0,0,0,0.4);
            color: #fff;
            z-index: 2147483648; 
            /* This is ridiculous so that it overrides the shadow 
            dom and shows the custom player in full screen mode instead */
            }
            .player:hover .player__controls {
            transform: translateY(0);
            }
            .player:hover .progress {
            height:15px;
            }
            .player__controls > * {
            flex:1;
            }
            .progress {
            flex:10;
            position: relative;
            display:flex;
            flex-basis:100%;
            height:5px;
            transition:height 0.3s;
            background:rgba(0,0,0,0.5);
            cursor:ew-resize;
            }
            .current,
            .duration,
            .fullscreen-btn {
            max-width: 30px;
            color: #fff;
            font-size: 10px;
            margin: auto 0px;
            padding: 0 7px;
            }
            .fullscreen-btn {
            color: #000;
            margin: auto 6px;
            background-color: #f9f9f9;
            border-radius: 2px;
            border: 0;
            }
            .progress__filled {
            width:50%;
            background:#ffc600;
            flex:0;
            flex-basis:0%;
            }
            .progress__filled .current {
            position: absolute;
            right: 0;
            top: -10px;
            }
            /* unholy css to style input type="range" */
            video::-webkit-media-controls {
            display:none !important;
            }
            input[type=range] {
            -webkit-appearance: none;
            background:transparent;
            width: 100%;
            margin: 0 5px;
            }
            input[type=range]:focus {
            outline: none;
            }
            input[type=range]::-webkit-slider-runnable-track {
            width: 100%;
            height: 8.4px;
            cursor: pointer;
            box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0 0 1px rgba(13, 13, 13, 0);
            background: rgba(255,255,255,0.8);
            border-radius: 1.3px;
            border: 0.2px solid rgba(1, 1, 1, 0);
            }
            input[type=range]::-webkit-slider-thumb {
            height: 15px;
            width: 15px;
            border-radius: 50px;
            background: #ffc600;
            cursor: pointer;
            -webkit-appearance: none;
            margin-top: -3.5px;
            box-shadow:0 0 2px rgba(0,0,0,0.2);
            }
            input[type=range]:focus::-wefbkit-slider-runnable-track {
            background: #bada55;
            }
            input[type=range]::-moz-range-track {
            width: 100%;
            height: 8.4px;
            cursor: pointer;
            box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0 0 1px rgba(13, 13, 13, 0);
            background: #ffffff;
            border-radius: 1.3px;
            border: 0.2px solid rgba(1, 1, 1, 0);
            }
            input[type=range]::-moz-range-thumb {
            box-shadow: 0 0 0 rgba(0, 0, 0, 0), 0 0 0 rgba(13, 13, 13, 0);
            height: 15px;
            width: 15px;
            border-radius: 50px;
            background: #ffc600;
            cursor: pointer;
            }
        </style>
    </head>
    <body>
        {{ titre }}
        <div id="player__container">
            <div class="player">
                <video class="player__video viewer" src="http://51.38.227.2/Fullmetal.Alchemist.Brotherhood.01.mp4"></video>
                <div class="player__controls">
                    <div class="progress">
                        <div class="progress__filled"></div>
                    </div>
                    <button class="player__button toggle" title="Toggle Play">►</button>
                    <input type="range" name="volume" class="player__slider" min="0" max="1" step="0.05" value="1">
                    <input type="range" name="playbackRate" class="player__slider" min="0.5" max="2" step="0.5" value="1">
                    <span class="current">00:00</span> / <span class="duration">00:00</span>
                    <button data-skip="-10" class="player__button">« 10s</button>
                    <button data-skip="25" class="player__button">25s »</button>
                    <button class="fullscreen-btn">FS</button>
                </div>
            </div>
        </div>
        <script>
            /* Get our elements */ 
            
            
            const player       =  document.querySelector('.player');
            
            const video        =  player.querySelector('.viewer');
            
            const progress     =  player.querySelector('.progress');
            const progressBar  =  player.querySelector('.progress__filled');
            
            const toggle       =  player.querySelector('.toggle');
            const skipButtons  =  player.querySelectorAll('[data-skip]');
            const ranges       =  player.querySelectorAll('.player__slider');
            
            const current      =  player.querySelector('.current');
            const duration     =  player.querySelector('.duration');
            const fullscreen   =  player.querySelector('.fullscreen-btn');
            
            
            
            
            /* Build out functions */ 
            
            
            // toggle play/pause
            function togglePlay() {
              const method = video.paused ? 'play' : 'pause';
              video[method]();
            }
            
            // Detect press of spacebar, toggle play
            function detectKeypress(e) {
            	if (e.keyCode == 32) {
            	  togglePlay();
            	} else {
                  return;
            	}
            }
            
            // Update button on play/pause
            function updateButton() {
              const icon = this.paused ? '►' : '❚ ❚';
              toggle.textContent = icon;
            }
            
            // Allow for video skipping
            function skip() {
            	video.currentTime += parseFloat(this.dataset.skip);
            }
            
            // Handle the range of the video
            function handleRangeUpdate() {
            	video[this.name] = this.value;
            }
            
            // Track how far the video has progressed and create css
            // variable so that we can visually represent it 
            function handleProgress() {
            	const percent = (video.currentTime / video.duration) * 100;
            	progressBar.style.flexBasis = `${percent}%`;
            }
            
            // Allow for video scrubbing
            function scrub(e) {
             const scrubTime = (e.offsetX / progress.offsetWidth) * video.duration;
             video.currentTime = scrubTime;
             console.log(currentTime);
            }
            
            
            // Get currnet time of video and append correct amount of 0s
            function currentTime() { 
               	var curmins = Math.floor(video.currentTime / 60);
            	var cursecs = Math.floor(video.currentTime - curmins * 60);
            	var durmins = Math.floor(video.duration / 60);
            	var dursecs = Math.floor(video.duration - durmins * 60);
            	if(cursecs < 10){ cursecs = "0"+cursecs; }
            	if(dursecs < 10){ dursecs = "0"+dursecs; }
            	if(curmins < 10){ curmins = "0"+curmins; }
            	if(durmins < 10){ durmins = "0"+durmins; }
            	current.innerHTML = curmins+":"+cursecs;
            	duration.innerHTML = durmins+":"+dursecs;
            }
            
            // Create fullscreen video button
            function toggleFullscreen() {
            	if(video.requestFullScreen){
            		video.requestFullScreen();
            	} else if(video.webkitRequestFullScreen){
            		video.webkitRequestFullScreen();
            	} else if(video.mozRequestFullScreen){
            		video.mozRequestFullScreen();
            	}
            }
            
            
            
            
            /* Hook up the event listeners */ 
            
            
            // Click events
            video.addEventListener('click', togglePlay);
            toggle.addEventListener('click', togglePlay);
            fullscreen.addEventListener('click', toggleFullscreen);
            
            // Keypress (Play/Pause)
            window.addEventListener('keydown', detectKeypress);
            
            // Play/Pause events 
            video.addEventListener('play', updateButton);
            video.addEventListener('pause', updateButton);
            
            // Do these on time update
            video.addEventListener('timeupdate', currentTime);
            video.addEventListener('timeupdate', handleProgress);
            
            // Skip buttons
            skipButtons.forEach(button => button.addEventListener('click', skip));
            
            // Detect how far mouse has moved
            ranges.forEach(range => range.addEventListener('change', handleRangeUpdate));
            ranges.forEach(range => range.addEventListener('mousemove', handleRangeUpdate));
            
            // Track scrubbing 
            let mousedown = false;
            progress.addEventListener('click', scrub);
            progress.addEventListener('mousemove', (e) => mousedown && scrub(e));
            
            // Track when mouse is up/down on scrub bar
            progress.addEventListener('mousedown', () => mousedown = true);
            progress.addEventListener('mouseup', () => mousedown = false);
        </script>
    </body>
</html>